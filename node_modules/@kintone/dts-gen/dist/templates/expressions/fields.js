"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubTableField = exports.TsDefinedField = exports.FieldGroup = void 0;
const expression_1 = require("./expression");
const typescriptfieldtypeconverter_1 = require("./typescriptfieldtypeconverter");
class FieldGroup {
    constructor(stringFields, calculatedFields, stringListFields, entityListFields, fileFields) {
        this.stringFields = stringFields;
        this.calculatedFields = calculatedFields;
        this.stringListFields = stringListFields;
        this.entityListFields = entityListFields;
        this.fileFields = fileFields;
    }
    tsExpression() {
        return `
${(0, expression_1.toTsExpressions)(this.stringFields)}
${(0, expression_1.toTsExpressions)(this.calculatedFields)}
${(0, expression_1.toTsExpressions)(this.stringListFields)}
${(0, expression_1.toTsExpressions)(this.entityListFields)}
${(0, expression_1.toTsExpressions)(this.fileFields)}
`.trim();
    }
}
exports.FieldGroup = FieldGroup;
class TsDefinedField {
    constructor(fieldName, fieldType) {
        this.fieldName = fieldName;
        this.fieldType = fieldType;
    }
    tsExpression() {
        return `"${this.fieldName}" : ${typescriptfieldtypeconverter_1.Converter.convert(this.fieldType)};`.trim();
    }
}
exports.TsDefinedField = TsDefinedField;
class SubTableField {
    constructor(fieldName, fieldType, fieldGroup) {
        this.fieldName = fieldName;
        this.fieldType = fieldType;
        this.fieldGroup = fieldGroup;
    }
    tsExpression() {
        return `
"${this.fieldName}" : {
    type: "${this.fieldType}";
    value: {
        id: string;
        value: {
            ${this.fieldGroup.tsExpression()}
        }
    }[];
};`.trim();
    }
}
exports.SubTableField = SubTableField;
//# sourceMappingURL=fields.js.map