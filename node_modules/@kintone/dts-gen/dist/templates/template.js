"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeDefinitionTemplate = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const prettier = __importStar(require("prettier"));
const eslint_1 = require("eslint");
const converter_1 = require("./converter");
const renderAsFile = (output, renderInput) => __awaiter(void 0, void 0, void 0, function* () {
    const tsExpression = (0, converter_1.convertToTsExpression)(renderInput);
    const eslint = new eslint_1.ESLint({
        fix: true,
        useEslintrc: false,
        baseConfig: {
            extends: "@cybozu/eslint-config/presets/typescript",
            globals: {
                kintone: true,
            },
            rules: {
                "@typescript-eslint/no-namespace": [
                    "error",
                    { allowDeclarations: true },
                ],
            },
        },
    });
    const eslintResult = (yield eslint.lintText(tsExpression.tsExpression()))[0];
    if (eslintResult.fatalErrorCount > 0) {
        throw new Error("failed to fix lint errors on generated type definition file.");
    }
    let eslintOutput = "";
    // https://eslint.org/docs/developer-guide/nodejs-api#-lintresult-type
    if ("output" in eslintResult) {
        eslintOutput = eslintResult.output;
    }
    else if ("source" in eslintResult) {
        eslintOutput = eslintResult.source;
    }
    else {
        throw new Error("unexpected result");
    }
    const prettySource = prettier.format(eslintOutput, {
        parser: "typescript",
    });
    const outputPath = path.resolve(output);
    yield fs.promises.mkdir(path.dirname(outputPath), { recursive: true });
    yield fs.promises.writeFile(outputPath, prettySource);
});
// definition
exports.TypeDefinitionTemplate = {
    renderAsFile,
};
//# sourceMappingURL=template.js.map