"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToTsExpression = void 0;
const F = __importStar(require("./expressions/fields"));
const namespace_1 = require("./expressions/namespace");
const typedefinitions_1 = require("./expressions/typedefinitions");
const convertToTsExpression = ({ namespace, typeName, fieldTypeGroups, }) => {
    const fieldGroup = convertToFieldGroup(fieldTypeGroups);
    const subTableFields = fieldTypeGroups.subTableFields.map((f) => new F.SubTableField(f.code, f.type, convertToFieldGroup(f.fields)));
    const typeDefenition = new typedefinitions_1.TypeDefinition(typeName, fieldGroup, subTableFields);
    const userFields = fieldTypeGroups.userFieldsInSavedRecord.map((f) => new F.TsDefinedField(f.code, f.type));
    const stringFieldsInSavedRecord = fieldTypeGroups.stringFieldsInSavedRecord.map((f) => new F.TsDefinedField(f.code, f.type));
    const savedTypeDefenition = new typedefinitions_1.SavedTypeDefinition(typeName, userFields, stringFieldsInSavedRecord);
    return new namespace_1.Namespace(namespace, typeDefenition, savedTypeDefenition);
};
exports.convertToTsExpression = convertToTsExpression;
const convertToFieldGroup = (input) => {
    const stringFields = input.stringFields.map((f) => new F.TsDefinedField(f.code, f.type));
    const calculatedFields = input.calculatedFields.map((f) => new F.TsDefinedField(f.code, f.type));
    const stringListFields = input.stringListFields.map((f) => new F.TsDefinedField(f.code, f.type));
    const entityFields = input.entityListFields.map((f) => new F.TsDefinedField(f.code, f.type));
    const fileFields = input.fileTypeFields.map((f) => new F.TsDefinedField(f.code, f.type));
    return new F.FieldGroup(stringFields, calculatedFields, stringListFields, entityFields, fileFields);
};
//# sourceMappingURL=converter.js.map