"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpTestAppClient = void 0;
const form_data_1 = __importDefault(require("form-data"));
const axios_utils_1 = require("./axios-utils");
class SetUpTestAppClient {
    constructor(input) {
        this.client = axios_utils_1.AxiosUtils.newAxiosInstance(input);
    }
    requestCreateNewApp(input) {
        const config = {
            url: "/k/v1/preview/app.json",
            method: "POST",
            data: input,
        };
        return this.client
            .request(config)
            .then((resp) => resp.data);
    }
    requestAddFormField(input) {
        const config = {
            url: "/k/v1/preview/app/form/fields.json",
            method: "POST",
            data: input,
        };
        return this.client.request(config).then((resp) => {
            return resp.data;
        });
    }
    requestUploadFile(input) {
        const data = new form_data_1.default();
        data.append("file", input.data, {
            filename: input.fileName,
            contentType: input.contentType,
        });
        const headers = data.getHeaders();
        const config = {
            url: "/k/v1/file.json",
            headers,
            method: "POST",
            data,
        };
        return this.client.request(config).then((resp) => {
            return resp.data;
        });
    }
    requestJsCustomizeUpdate(input) {
        const config = {
            url: "/k/v1/preview/app/customize.json",
            method: "PUT",
            data: input,
        };
        return this.client.request(config).then((resp) => {
            return resp.data;
        });
    }
    requestDepoy(input) {
        const config = {
            url: "/k/v1/preview/app/deploy.json",
            method: "POST",
            data: input,
        };
        return this.client.request(config).then((resp) => resp.data);
    }
    requestGetDeployStatus(input) {
        const config = {
            url: "/k/v1/preview/app/deploy.json",
            method: "GET",
            data: input,
        };
        return this.client.request(config).then((resp) => {
            return resp.data;
        });
    }
    requestAddRecord(input) {
        const config = {
            url: "/k/v1/record.json",
            method: "POST",
            data: input,
        };
        return this.client.request(config).then((resp) => {
            return resp.data;
        });
    }
}
exports.SetUpTestAppClient = SetUpTestAppClient;
//# sourceMappingURL=setup-test-app-client.js.map